* Operations to support
** Scalars
 - -s?
   - Could just use * -1
 - s + s
 - s - s
 - s * s
 - s / s
 - s ^ s
 - s % s
 - |s|
** Vectors
 - v * s
 - v / s
 - v + v
 - v - v
 - v . v
 - v x v
 - ||v||
 - norm(v) -> v
 - v.proj(v) -> v
 - lerp(v, v, s) -> v
** Matrices
 - m + m
 - m - m
 - m * m
 - inverse(m) -> m
 - determinant(m) -> s
 - eigenvalue(m) -> s
 - eigenvector(m) -> v
 - v * m -> v
 - translate/rotate/scale/skew helpers -> m
   - Should this produce a value, or should it act like an operation?  or both somehow?
   - Maybe inverse these functions too?
 - transpose(m) -> m
** Mux/demux
 - v -> (s, s, s)
 - (s, s, s) -> v
 - m -> (v, v, v, v)
 - (v, v, v, v) -> m
** Trig
 - sin/cos/tan... etc(s) -> s
 - angle_between(v, v) -> s
** Misc
*** Quaternions?
*** Other geometry?
 - Sphere
 - Plane
*** Branching or other control flow?
* Operation types
| Operation | Supported input types                                            | s in           | v in            | m in            |
|-----------+------------------------------------------------------------------+----------------+-----------------+-----------------|
| +         | (s, s) -> s, (v, v) -> v, (m, m) -> m                            | s -> s         | v -> v          | m -> m          |
| -         | s -> s?, v -> v?, m -> m?, (s, s) -> s, (v, v) -> v, (m, m) -> m | s?, s -> s     | v?, v -> v      | m?, m -> m      |
| *         | (s, s) -> s, (v, s) -> v, (s, v) -> v, (m, m) -> m, (v, m) -> v? | s -> s, v -> v | s -> v, m -> v* | m -> m, v -> v* |
| /         | (s, s) -> s, (v, s) -> v, (s, v) -> v?                           | s -> s, v -> v | s -> v          |                 |
| ^         | (s, s) -> s                                                      | s -> s         |                 |                 |
| %         | (s, s) -> s                                                      | s -> s         |                 |                 |
| .         | (v, v) -> s                                                      |                | v -> s          |                 |
| x         | (v, v) -> v                                                      |                | v -> v          |                 |
** +
  IN                              OUT
| LHS \ RHS | S | V | M | A |   | LHS \ RHS | S | V | M | A |
|-----------+---+---+---+---+---+-----------+---+---+---+---|
| S         |   | - | - | s |   | S         | s | - | - |   |
| V         | - |   | - | v |   | V         | - | v | - |   |
| M         | - | - |   | m |   | M         | - | - | m |   |
| A         | s | v | m |   |   | A         |   |   |   | a |
** -
  IN                              OUT
| LHS \ RHS | S | V | M | A |   | LHS \ RHS | S | V | M | A |
|-----------+---+---+---+---+---+-----------+---+---+---+---|
| S         |   | - | - | s |   | S         | s | - | - |   |
| V         | - |   | - | v |   | V         | - | v | - |   |
| M         | - | - |   | m |   | M         | - | - | m |   |
| A         | s | v | m |   |   | A         |   |   |   | a |
** *
  IN                               OUT
| LHS \ RHS | S | V | M | A  |   | LHS \ RHS | S | V | M  | A |
|-----------+---+---+---+----+---+-----------+---+---+----+---|
| S         |   |   |   | a  |   | S         | s | v | m  |   |
| V         |   | - |   | sm |   | V         | v | - | v  | v |
| M         |   | - |   | sm |   | M         | m | - | m  | m |
| A         | a | s | a |    |   | A         |   | v | vm | a |
** /
  IN                              OUT
| LHS \ RHS | S | V | M | A |   | LHS \ RHS | S | V | M | A |
|-----------+---+---+---+---+---+-----------+---+---+---+---|
| S         |   |   |   | a |   | S         | s | v | m | a |
| V         |   | - | - | s |   | V         | v | - | - | v |
| M         |   | - | - | s |   | M         | m | - | - | m |
| A         | a | s | s |   |   | A         | a | v | m | a |
* 2D mode?
* Undo/redo support
